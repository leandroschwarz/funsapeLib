//typedef enum displayType_t {
//	DISPLAY_COMMON_ANODE	= 0,
//	DISPLAY_COMMON_CATHODE	= 1
//} displayType_t;

//typedef enum twiOperation_t {
//	TWI_WRITE			= 0,
//	TWI_READ			= 1,
//	TWI_SET_THEN_READ	= 2
//} twiOperation_t;

/*
typedef enum twiState_e {
	TWI_START					= 0x08,	// START has been transmitted
	TWI_REP_START				= 0x10,	// Repeated START has been transmitted
	TWI_ARB_LOST				= 0x38,	// Arbitration lost
	TWI_MTX_ADR_ACK				= 0x18,	// SLA+W has been transmitted and ACK received
	TWI_MTX_ADR_NACK			= 0x20,	// SLA+W has been transmitted and NACK received
	TWI_MTX_DATA_ACK			= 0x28,	// Data byte has been transmitted and ACK received
	TWI_MTX_DATA_NACK			= 0x30,	// Data byte has been transmitted and NACK received
	TWI_MRX_ADR_ACK				= 0x40,	// SLA+R has been transmitted and ACK received
	TWI_MRX_ADR_NACK			= 0x48,	// SLA+R has been transmitted and NACK received
	TWI_MRX_DATA_ACK			= 0x50,	// Data byte has been received and ACK transmitted
	TWI_MRX_DATA_NACK			= 0x58,	// Data byte has been received and NACK transmitted
	TWI_STX_ADR_ACK				= 0xA8,	// Own SLA+R has been received; ACK has been returned
	TWI_STX_ADR_ACK_M_ARB_LOST	= 0xB0,	// Arbitration lost in SLA+R/W as Master; own SLA+R has been received; ACK has been returned
	TWI_STX_DATA_ACK			= 0xB8,	// Data byte in TWDR has been transmitted; ACK has been received
	TWI_STX_DATA_NACK			= 0xC0,	// Data byte in TWDR has been transmitted; NOT ACK has been received
	TWI_STX_DATA_ACK_LAST_BYTE	= 0xC8,	// Last data byte in TWDR has been transmitted (TWEA = 0); ACK has been received
	TWI_SRX_ADR_ACK				= 0x60,	// Own SLA+W has been received ACK has been returned
	TWI_SRX_ADR_ACK_M_ARB_LOST	= 0x68,	// Arbitration lost in SLA+R/W as Master; own SLA+W has been received; ACK has been returned
	TWI_SRX_GEN_ACK				= 0x70,	// General call address has been received; ACK has been returned
	TWI_SRX_GEN_ACK_M_ARB_LOST	= 0x78,	// Arbitration lost in SLA+R/W as Master; General call address has been received; ACK has been returned
	TWI_SRX_ADR_DATA_ACK		= 0x80,	// Previously addressed with own SLA+W; data has been received; ACK has been returned
	TWI_SRX_ADR_DATA_NACK		= 0x88,	// Previously addressed with own SLA+W; data has been received; NOT ACK has been returned
	TWI_SRX_GEN_DATA_ACK		= 0x90,	// Previously addressed with general call; data has been received; ACK has been returned
	TWI_SRX_GEN_DATA_NACK		= 0x98,	// Previously addressed with general call; data has been received; NOT ACK has been returned
	TWI_SRX_STOP_RESTART		= 0xA0,	// A STOP condition or repeated START condition has been received while still addressed as Slave
	TWI_NO_STATE				= 0xF8,	// No relevant state information available; TWINT = 0
	TWI_BUS_ERROR				= 0x00	// Bus error due to an illegal START or STOP condition
} twiState_e;
*/


// New Data Type - Enumerations => parametric table that doesn't mantain value equivalence with datasheet
//typedef enum sleepMode_e {
//	SLEEP_MODE_NO_CHANGE	= 0,	// Keep last sleep mode
//	SLEEP_MODE_IDLE			= 1,	// Sleep mode IDLE
//	SLEEP_MODE_ADC			= 2,	// Sleep mode for ADC noise reduction
//	SLEEP_MODE_PWR_DOWN		= 3,	// Sleep mode POWER DOWN
//	SLEEP_MODE_PWR_SAVE		= 4,	// Sleep mode POWER SAVR
//	SLEEP_MODE_STANDBY		= 5,	// Sleep mode STANDBY
//	SLEEP_MODE_EXT_STANDBY	= 6		// Sleep mode EXTENDED STANDBY
//} sleepMode_e;

//typedef enum timerOutput_e {
//	TIMER_PORT_NO_CHANGE			= 0,	// Keep last port configuration
//	TIMER_PORT_NORMAL				= 1,	// Output Compare Pin disconnected; normal GPIO operation
//	TIMER_PORT_TOGGLE_ON_COMPARE	= 2,	// Toggle pin value on compare
//	TIMER_PORT_CLEAR_ON_COMPARE		= 3,	// Clear pin on compare
//	TIMER_PORT_SET_ON_COMPARE		= 4,	// Set pin on compare
//	TIMER_PORT_NON_INVERTING_MODE	= 5,	// PWM non-inverting mode
//	TIMER_PORT_INVERTING_MODE		= 6		// PWM inverting mode
//} timerOutput_e;

//typedef enum portMode_e {
//	PORT_NO_CHANGE		= 0,		// Keep last pin configurations
//	PORT_OUTPUT_LOW		= 1,		// Pin configured as OUTPUT, LOW logic level
//	PORT_OUTPUT_HIGH	= 2,		// Pin configured as OUTPUT, HIGH logic level
//	PORT_INPUT_TRISTATE	= 3,		// Pin configured as INPUT, PULL-UPs off
//	PORT_INPUT_PULL_UP	= 4			// Pin configured as INPUT, PULL-UPs on
//} portMode_e;
/*
typedef enum lcdSize_e {
	LCD_SIZE_UNDEFINED	= 0,		// Used to verify if the variable was previously initialized
	LCD_8X1				= 108,		// LCD 8 columns x 1 line
	LCD_8X2				= 208,		// LCD 8 columns x 2 line
	LCD_10x2			= 210,		// LCD 10 columns x 2 lines
	LCD_12X2			= 212,		// LCD 12 columns x 2 lines
	LCD_12X4			= 412,		// LCD 12 columns x 4 lines
	LCD_16X1			= 116,		// LCD 16 columns x 1 line
	LCD_16X2			= 216,		// LCD 16 columns x 2 lines
	LCD_16X4			= 416,		// LCD 16 columns x 4 lines
	LCD_20X1			= 120,		// LCD 20 columns x 1 line
	LCD_20X2			= 220,		// LCD 20 columns x 2 lines
	LCD_20X4			= 420,		// LCD 20 columns x 4 lines
	LCD_24X1			= 124,		// LCD 24 columns x 1 line
	LCD_24X2			= 224,		// LCD 24 columns x 2 lines
	LCD_30X2			= 230,		// LCD 30 columns x 2 lines
	LCD_32X2			= 232,		// LCD 32 columns x 2 lines
	LCD_40X1			= 140,		// LCD 40 columns x 1 line
	LCD_40X2			= 240		// LCD 20 columns x 2 lines
} lcdSize_e;

typedef enum lcdFont_e {
	LCD_FONT_NO_CHANGE		= 0,	// Keep last value configured
	LCD_FONT_5X8			= 1,	// Use font 5x8 pixels
	LCD_FONT_5X10			= 2		// Use font 5x8 pixels
} lcdFont_e;

typedef enum lcdDisplayMode_e {
	LCD_DISPLAY_MODE_NO_CHANGE	= 0,	// Keep last mode configured
	LCD_DISPLAY_MODE_OVERWRITE	= 1,	// Overwrite mode
	LCD_DISPLAY_MODE_SHIFT		= 2		// Insert mode (shift display)
} lcdDisplayMode_e ;

typedef enum lcdDisplayDirection_e {
	LCD_DISPLAY_DIRECTION_NO_CHANGE		= 0,	// Keep last value configured
	LCD_DISPLAY_DIRECTION_DECREMENT		= 1,	// Decrement address after character write
	LCD_DISPLAY_DIRECTION_INCREMENT		= 2		// Increment address after character write
} lcdDisplayDirection_e;

// New Data Type - Flags => enumerations that can be combined in the form of flags
typedef enum powerReductionFlags_f {
	PRR_NONE		= 0,	// Keep last value configured
	PRR_ADC			= 1,	// Keep last value configured
	PRR_USART0		= 2,	// Keep last value configured
	PRR_SPI			= 4,	// Keep last value configured
	PRR_TIM0		= 8,	// Keep last value configured
	PRR_TIM1		= 16,	// Keep last value configured
	PRR_TIM2		= 32,	// Keep last value configured
	PRR_PRTWI		= 64	// Keep last value configured
} powerReductionFlags_f;
*/





// -----------------------------------------------------------------------------
// SystemConfiguration class - Constructors definitions ------------------------

SystemConfiguration::SystemConfiguration(uint32_t mainClock)
{
	this->mainSourceClock_	= mainClock;
	this->clockPrescaler_	= SYSTEM_CLOCK_PRESCALER_1;
	this->cpuClock_			= mainClock;
	this->stopWatchValue_	= 0;
	this->stopWatchMark_	= 0;
	this->stopWatchHalted_	= TRUE;
	this->lastError_		= ERROR_NONE;
}

// -----------------------------------------------------------------------------
// SystemConfiguration class - Public methods definitions ----------------------

error_e SystemConfiguration::changeClockPrescaler(systemClockPrescaler_e prescaler)
{
	uint8_t auxPrescaler = 0;

	// Decode prescaler
	switch (prescaler) {
	case SYSTEM_CLOCK_PRESCALER_1:
		auxPrescaler = 0;
		break;
	case SYSTEM_CLOCK_PRESCALER_2:
		auxPrescaler = 1;
		break;
	case SYSTEM_CLOCK_PRESCALER_4:
		auxPrescaler = 2;
		break;
	case SYSTEM_CLOCK_PRESCALER_8:
		auxPrescaler = 3;
		break;
	case SYSTEM_CLOCK_PRESCALER_32:
		auxPrescaler = 4;
		break;
	case SYSTEM_CLOCK_PRESCALER_64:
		auxPrescaler = 5;
		break;
	case SYSTEM_CLOCK_PRESCALER_128:
		auxPrescaler = 6;
		break;
	case SYSTEM_CLOCK_PRESCALER_256:
		auxPrescaler = 7;
		break;
	default:
		this->lastError_ = ERROR_UNSUPPORTED_CONFIGURATION_SYSTEM_CLOCK_PRESCALER;
		return ERROR_UNSUPPORTED_CONFIGURATION_SYSTEM_CLOCK_PRESCALER;
	}

	// Changes system clock prescaler
	GPDSE_ATOMIC_BLOCK {
		CLKPR = 0b10000000;
		CLKPR = auxPrescaler;
	}

	// Verifies if the change was successful
	asm volatile("nop");
	asm volatile("nop");
	if ((CLKPR & 0x7F) != auxPrescaler) {
		this->lastError_ = ERROR_SYSTEM_CLOCK_PRESCALER_COULD_NOT_BE_CHANGED;
		return ERROR_SYSTEM_CLOCK_PRESCALER_COULD_NOT_BE_CHANGED;
	}

	// Recalculate system values
	this->clockPrescaler_ = prescaler;
	this->cpuClock_ = this->mainSourceClock_ / prescaler;

	this->lastError_ = ERROR_NONE;
	return ERROR_NONE;
}

uint32_t SystemConfiguration::getCpuClock(void)
{
	return this->cpuClock_;
}

error_e SystemConfiguration::getLastError(void)
{
	return this->lastError_;
}

uint32_t SystemConfiguration::readStopWatch(void)
{
	return this->stopWatchValue_;
}

void SystemConfiguration::resumeStopWatch(void)
{
	this->stopWatchHalted_ = FALSE;
}

void SystemConfiguration::pauseStopWatch(void)
{
	this->stopWatchHalted_ = TRUE;
}

void SystemConfiguration::resetStopWatch(void)
{
	this->stopWatchValue_ = 0;
	this->stopWatchMark_ = 0;
}

void SystemConfiguration::setStopWatchMark(void)
{
	this->stopWatchMark_ = this->stopWatchValue_;
}

void SystemConfiguration::incrementStopWatch(void)
{
	this->stopWatchValue_++;
}

uint32_t SystemConfiguration::calculateElapsedTime(bool_t setNewMark)
{
	uint32_t start = this->stopWatchMark_;
	uint32_t current = this->stopWatchValue_;
	uint32_t elapsed = 0;

	elapsed = (current > start) ? (current - start) : (((0xFFFFFFFF - start)  + current) + 1);
	if (setNewMark) {
		this->stopWatchMark_ = current;
	}

	return elapsed;
}

uint32_t SystemConfiguration::calculateElapsedTime(uint32_t customMark)
{
	uint32_t current = this->stopWatchValue_;
	uint32_t elapsed = 0;

	elapsed = (current > customMark) ? (current - customMark) : (((0xFFFFFFFF - customMark)  + current) + 1);

	return elapsed;
}

void SystemConfiguration::announceError(error_e error)
{
	this->lastError_ = error;
}

// -----------------------------------------------------------------------------
// SystemConfiguration class - Private methods definitions ---------------------

/* NONE */

// -----------------------------------------------------------------------------
// SystemConfiguration class - Protected methods definitions -------------------

/* NONE */

// -----------------------------------------------------------------------------
// General public functions definitions ----------------------------------------

weekDay_t dayOfWeek(uint8_t monthDay, month_t month, uint16_t year)
{
	uint16_t aux16;
	year -= month < 3;
	aux16 = (year + year / 4 - year / 100 + year / 400 + "-bed=pen+mad."[month] + monthDay) % 7;
	aux16++;

	return (weekDay_t)aux16;
}
