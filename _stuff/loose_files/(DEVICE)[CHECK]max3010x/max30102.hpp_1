/* =============================================================================
 * Project:			FunSAPE++ Embedded Library
 * File name:		max30102.hpp
 * Module:			MAX30102 module interface for FunSAPE++ Embedded Library
 * 					project
 * Authors:			__AUTHORS_TO_REPLACE__
 * Build:			__BUILD_TO_REPLACE__
 * Last edition:	__DATE_TO_REPLACE__
 * ========================================================================== */

// =============================================================================
// Include guard
// =============================================================================

#ifndef __MAX30102_HPP
#define __MAX30102_HPP							__BUILD_TO_REPLACE__

// =============================================================================
// Dependencies
// =============================================================================

// -----------------------------------------------------------------------------
// Global definitions file -----------------------------------------------------

#include "../funsapeLibGlobalDefines.hpp"
#ifndef __FUNSAPE_LIB_GLOBAL_DEFINES_HPP
#	error	[max30102.hpp] Error 9 - Global definitions file (funsapeLibGlobalDefines.hpp) is missing or corrupted!
#elif __FUNSAPE_LIB_GLOBAL_DEFINES_HPP != __BUILD_TO_REPLACE__
#	error	[max30102.hpp] Error 10 - Build mismatch between (max30102.hpp) and global definitions file (funsapeLibGlobalDefines.hpp)!
#endif

// -----------------------------------------------------------------------------
// Header files - FunSAPE Library header files ---------------------------------

#include "../util/funsapeLibHandler.hpp"
#ifndef __FUNSAPE_LIB_HANDLER_HPP
#	error	[max30102.hpp] Error 1 - Header file (funsapeLibHandler.hpp) is missing or corrupted!
#elif __FUNSAPE_LIB_HANDLER_HPP != __BUILD_TO_REPLACE__
#	error	[max30102.hpp] Error 2 - Build mismatch between (max30102.hpp) and (funsapeLibHandler.hpp) header files!
#endif
#include "../util/funsapeLibDebug.hpp"
#ifndef __FUNSAPE_LIB_DEBUG_HPP
#	error	[max30102.hpp] Error 1 - Header file (funsapeLibDebug.hpp) is missing or corrupted!
#elif __FUNSAPE_LIB_DEBUG_HPP != __BUILD_TO_REPLACE__
#	error	[max30102.hpp] Error 2 - Build mismatch between (max30102.hpp) and (funsapeLibDebug.hpp) header files!
#endif

// =============================================================================
// Undefining previous definitions
// =============================================================================

// NONE

// =============================================================================
// Constant definitions
// =============================================================================

// NONE

// =============================================================================
// Macro-function definitions
// *INDENT-OFF*
// =============================================================================

// NONE

// *INDENT-ON*

// =============================================================================
// New data types
// =============================================================================

// NONE

// =============================================================================
// Extern global variables
// =============================================================================

// NONE

// =============================================================================
// Max30102 - Class declaration
// =============================================================================

class Max30102
{
	// -------------------------------------------------------------------------
	// New data types
	// -------------------------------------------------------------------------

public:
	//     //////////////////     SAMPLE AVERAGING     //////////////////     //
	enum class SampleAveraging {
		SAMPLE_AVERAGING_OFF			= 0,
		SAMPLE_AVERAGING_2				= 1,
		SAMPLE_AVERAGING_4				= 2,
		SAMPLE_AVERAGING_8				= 3,
		SAMPLE_AVERAGING_16				= 4,
		SAMPLE_AVERAGING_32				= 5,
	};

	//     /////////////////////     FULL SCALE     /////////////////////     //
	enum class FullScale {
		FULL_SCALE_2048_NA				= 0,
		FULL_SCALE_4096_NA				= 1,
		FULL_SCALE_8192_NA				= 2,
		FULL_SCALE_16384_NA				= 3
	};

	//     ///////////////////    INTERRUPT FLAGS     ///////////////////     //
	typedef enum InterruptFlags {
		FIFO_ALMOST_FULL_FLAG					= (1 << 7),
		NEW_FIFO_DATA_READY_FLAG				= (1 << 6),
		AMBIENT_LIGHT_CANCELLATION_FLAG			= (1 << 5),
		INTERNAL_TEMPERATURE_READY_FLAG			= (1 << 1),
		POWER_READY_FLAG						= (1 << 0),
		ALL_FLAGS								= (FIFO_ALMOST_FULL_FLAG | NEW_FIFO_DATA_READY_FLAG | AMBIENT_LIGHT_CANCELLATION_FLAG | INTERNAL_TEMPERATURE_READY_FLAG | POWER_READY_FLAG)
	} InterruptFlags;

	//     /////////////////////    LED CURRENT     /////////////////////     //
	enum class LedCurrent {
		LED_OFF							= 0,
		LED_CURRENT_200_UA				= 1,
		LED_CURRENT_400_UA				= 2,
		LED_CURRENT_800_UA				= 4,
		LED_CURRENT_1_MA				= 5,
		LED_CURRENT_2_MA				= 10,
		LED_CURRENT_3_MA				= 15,
		LED_CURRENT_4_MA				= 20,
		LED_CURRENT_5_MA				= 26,
		LED_CURRENT_6_MA				= 31,
		LED_CURRENT_7_MA				= 36,
		LED_CURRENT_8_MA				= 41,
		LED_CURRENT_9_MA				= 46,
		LED_CURRENT_10_MA				= 51,
		LED_CURRENT_11_MA				= 56,
		LED_CURRENT_12_MA				= 61,
		LED_CURRENT_13_MA				= 66,
		LED_CURRENT_14_MA				= 71,
		LED_CURRENT_15_MA				= 77,
		LED_CURRENT_16_MA				= 82,
		LED_CURRENT_17_MA				= 87,
		LED_CURRENT_18_MA				= 92,
		LED_CURRENT_19_MA				= 96,
		LED_CURRENT_20_MA				= 102,
		LED_CURRENT_21_MA				= 107,
		LED_CURRENT_22_MA				= 112,
		LED_CURRENT_23_MA				= 117,
		LED_CURRENT_24_MA				= 122,
		LED_CURRENT_25_MA				= 128,
		LED_CURRENT_26_MA				= 133,
		LED_CURRENT_27_MA				= 138,
		LED_CURRENT_28_MA				= 143,
		LED_CURRENT_29_MA				= 148,
		LED_CURRENT_30_MA				= 153,
		LED_CURRENT_31_MA				= 158,
		LED_CURRENT_32_MA				= 163,
		LED_CURRENT_33_MA				= 168,
		LED_CURRENT_34_MA				= 173,
		LED_CURRENT_35_MA				= 179,
		LED_CURRENT_36_MA				= 184,
		LED_CURRENT_37_MA				= 189,
		LED_CURRENT_38_MA				= 194,
		LED_CURRENT_39_MA				= 199,
		LED_CURRENT_40_MA				= 204,
		LED_CURRENT_41_MA				= 209,
		LED_CURRENT_42_MA				= 214,
		LED_CURRENT_43_MA				= 219,
		LED_CURRENT_44_MA				= 224,
		LED_CURRENT_45_MA				= 230,
		LED_CURRENT_46_MA				= 235,
		LED_CURRENT_47_MA				= 240,
		LED_CURRENT_48_MA				= 245,
		LED_CURRENT_49_MA				= 250,
		LED_CURRENT_50_MA				= 255
	};

	//     ////////////////////     MODE CONTROL     ////////////////////     //
	enum class ModeControl {
		NO_MODE_SELECTED				= 0,
		HEART_RATE_MODE					= 2,
		SPO2_MODE						= 3,
		MULTI_LED_MODE					= 7
	};

	//     /////////////////////     RESOLUTION     /////////////////////     //
	enum class Resolution {
		RESOLUTION_15_BITS				= 0,
		RESOLUTION_16_BITS				= 1,
		RESOLUTION_17_BITS				= 2,
		RESOLUTION_18_BITS				= 3
	};

	//     /////////////////////    SAMPLE RATE     /////////////////////     //
	enum class SampleRate {
		SAMPLE_RATE_50_HZ				= 0,
		SAMPLE_RATE_100_HZ				= 1,
		SAMPLE_RATE_200_HZ				= 2,
		SAMPLE_RATE_400_HZ				= 3,
		SAMPLE_RATE_800_HZ				= 4,
		SAMPLE_RATE_1000_HZ				= 5,
		SAMPLE_RATE_1600_HZ				= 6,
		SAMPLE_RATE_3200_HZ				= 7
	};

	//     ////////////////    MULTILED SLOT CONTROL     ////////////////     //
	enum class SlotControl {
		SLOT_OFF						= 0,
		SLOT_RED						= 1,
		SLOT_INFRARED					= 2
	};

private:
	// NONE

protected:
	// NONE

	// -------------------------------------------------------------------------
	// Operators overloading
	// -------------------------------------------------------------------------

public:
	// NONE

private:
	// NONE

protected:
	// NONE

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

public:
	Max30102(void);

	// -------------------------------------------------------------------------
	// Methods - Inherited methods
	// -------------------------------------------------------------------------

public:
	// NONE

protected:
	// NONE

	// -------------------------------------------------------------------------
	// Methods - Class own methods
	// -------------------------------------------------------------------------

public:
	//     ////////////////     DEVICE CONFIGURATION     ////////////////     //
	bool init(
			Handler *handler_p													// TODO: Describe parameter
	);
	bool reset(void);
	bool setFullScale(
			FullScale sensorFullScale_p											// TODO: Describe parameter
	);
	bool setHeartRateMode(
			LedCurrent redLedCurrent_p = LedCurrent::LED_CURRENT_1_MA			// TODO: Describe parameter
	);
	bool setInfraredLedCurrent(
			LedCurrent infraredLedCurrent_p = LedCurrent::LED_CURRENT_1_MA		// TODO: Describe parameter
	);
	bool setMultiLedMode(               // FIXIT: Implement MultiLed mode
			SlotControl slot1_p,												// TODO: Describe parameter
			SlotControl slot2_p = SlotControl::SLOT_OFF,						// TODO: Describe parameter
			SlotControl slot3_p = SlotControl::SLOT_OFF,						// TODO: Describe parameter
			SlotControl slot4_p = SlotControl::SLOT_OFF							// TODO: Describe parameter
	);
	bool setRedLedCurrent(
			LedCurrent redLedCurrent_p = LedCurrent::LED_CURRENT_1_MA			// TODO: Describe parameter
	);
	bool setResolution(
			Resolution resolution_p												// TODO: Describe parameter
	);
	bool setSampleRate(
			SampleRate sampleRate_p												// TODO: Describe parameter
	);
	bool setSpo2Mode(
			LedCurrent redLedCurrent_p = LedCurrent::LED_CURRENT_1_MA,			// TODO: Describe parameter
			LedCurrent infraredLedCurrent_p	 = LedCurrent::LED_CURRENT_1_MA		// TODO: Describe parameter
	);
	bool shutDown(void);
	bool wakeUp(void);

	//     ///////////////    FIFO CONTROL AND STATUS     ///////////////     //
	bool configFifo(
			SampleAveraging sampleAveraging_p,									// TODO: Describe parameter
			bool rolloverOnFull_p,												// TODO: Describe parameter
			uint8_t fifoAlmostFullValue_p										// TODO: Describe parameter
	);
	bool flushFifo(void);
	bool getFifoOccupation(
			uint8_t *samplesWaiting_p,											// TODO: Describe parameter
			uint8_t *samplesLost_p = nullptr									// TODO: Describe parameter
	);

	//     ///////////////////    DATA MANAGEMENT     ///////////////////     //
	bool getFifoData(
			uint8_t samplesCount_p,												// TODO: Describe parameter
			uint16_t *redLedBuffer_p,											// TODO: Describe parameter
			uint16_t *infraredLedBuffer_p = nullptr								// TODO: Describe parameter
	);
	bool getFifoData(
			uint8_t samplesCount_p,												// TODO: Describe parameter
			uint32_t *redLedBuffer_p,											// TODO: Describe parameter
			uint32_t *infraredLedBuffer_p = nullptr								// TODO: Describe parameter
	);
	bool getFifoNewestSample(
			uint16_t *redValue_p,												// TODO: Describe parameter
			uint16_t *infraredValue_p = nullptr									// TODO: Describe parameter
	);
	bool getFifoNewestSample(
			uint32_t *redValue_p,												// TODO: Describe parameter
			uint32_t *infraredValue_p = nullptr									// TODO: Describe parameter
	);
	bool getFifoOldestSample(
			uint16_t *redValue_p,												// TODO: Describe parameter
			uint16_t *infraredValue_p = nullptr									// TODO: Describe parameter
	);
	bool getFifoOldestSample(
			uint32_t *redValue_p,												// TODO: Describe parameter
			uint32_t *infraredValue_p = nullptr									// TODO: Describe parameter
	);
	bool startTemperatureRead(void);
	bool getTemperature(
			float *tempValue_p,													// TODO: Describe parameter
			ThermometricScale tempScale_p = ThermometricScale::CELSIUS			// TODO: Describe parameter
	);
	bool getTemperature(
			int8_t *tempInteger_p,												// TODO: Describe parameter
			uint8_t *tempFrac_p												// TODO: Describe parameter
	);
	// TODO: Implement a function to return the temperature in fixed point notation

	//     ////////////     INTERRUPT CONTROL AND STATUS     ////////////     //
	bool disableInterrupts(
			InterruptFlags deactivationMask_p									// TODO: Describe parameter
	);
	bool enableInterrupts(
			InterruptFlags activationMask_p										// TODO: Describe parameter
	);
	bool generalIrqHandler(void);
	bool getInterruptStatus(
			InterruptFlags *interruptStatus_p = nullptr							// TODO: Describe parameter
	);

	//     /////////////////    INTERRUPT CALLBACKS     /////////////////     //
	bool setAmbLightCancOverflowInterruptCallback(
			void (* callbackFunction_p)(void)
	);
	bool setDieTempReadyInterruptCallback(
			void (* callbackFunction_p)(void)
	);
	bool setFifoAlmostFullInterruptCallback(
			void (* callbackFunction_p)(void)
	);
	bool setNewFifoDataReadyInterruptCallback(
			void (* callbackFunction_p)(void)
	);
	bool setPowerReadyInterruptCallback(
			void (* callbackFunction_p)(void)
	);

	//     ////////////////////    DEVICE STATUS     ////////////////////     //
	Error getLastError(void);

	void readAllRegs(
			uint8_t *regs_p

	);

	//     //////////////     CLASS CONTROL AND STATUS     //////////////     //
	void _clearMembers(void);

	//     ////////////////    REGISTER MANIPULATION     ////////////////     //
	bool _read(
			uint8_t regAddr_p,
			uint8_t *dataBuffer_p,
			uint16_t bytesToRead_p
	);
	bool _write(
			uint8_t regAddr_p,
			uint8_t *dataBuffer_p,
			uint16_t bytesToWrite_p
	);

	//     //////////////    DEVICE CONTROL AND STATUS     //////////////     //
	bool _isInitialized(void);

	//     ///////////////    FIFO CONTROL AND STATUS     ///////////////     //
	bool _getFifoInfo(void);
	bool _getFifoReadPointer(
			uint8_t *pointer_p													// TODO: Describe parameter
	);
	bool _getFifoWritePointer(
			uint8_t *pointer_p													// TODO: Describe parameter
	);
	bool _setFifoReadPointer(
			uint8_t pointer_p													// TODO: Describe parameter
	);
	bool _setFifoWritePointer(
			uint8_t pointer_p													// TODO: Describe parameter
	);
	bool _readFifoData(
			uint8_t samples_p,													// TODO: Describe parameter
			void *redLedBuffer_p,												// TODO: Describe parameter
			void *infraredLedBuffer_p,											// TODO: Describe parameter
			uint8_t varSize_p													// TODO: Describe parameter
	);

protected:
	// NONE

	// -------------------------------------------------------------------------
	// Properties
	// -------------------------------------------------------------------------

public:
	// NONE

private:
	//     /////////////////     PERIPHERAL HANDLER     /////////////////     //
	Handler			*_handler;

	//     ////////////     INTERRUPT CONTROL AND STATUS     ////////////     //
	bool			_ambLightCancOverflowInterruptEnable		: 1;
	bool			_ambLightCancOverflowInterruptFlag			: 1;
	bool			_dieTempReadyInterruptEnable				: 1;
	bool			_dieTempReadyInterruptFlag					: 1;
	bool			_fifoAlmostFullInterruptEnable				: 1;
	bool			_fifoAlmostFullInterruptFlag				: 1;
	bool			_newFifoDataReadyInterruptEnable			: 1;
	bool			_newFifoDataReadyInterruptFlag				: 1;
	bool			_powerReadyInterruptFlag					: 1;

	//     ////////////////////    DEVICE STATUS     ////////////////////     //
	bool			_initialized								: 1;
	Error			_lastError;
	uint8_t			_partId;
	uint8_t			_partRevision;
	bool			_shuttedDown								: 1;

	//     ////////////////     DEVICE CONFIGURATION     ////////////////     //
	uint8_t			_activeLedsCounter							: 3;
	FullScale		_fullScale;
	LedCurrent		_infraredLedCurrent;
	ModeControl		_modeControl;
	LedCurrent		_redLedCurrent;
	Resolution		_resolution;
	SampleRate		_sampleRate;

	//     ///////////////    FIFO CONTROL AND STATUS     ///////////////     //
public:
	uint8_t			_fifoAlmostFullValue						: 4;
	uint8_t			_fifoData;
	uint8_t			_fifoOverflowCounter						; //: 5;
	uint8_t			_fifoOverflowCounterOld						; //: 5;
	uint8_t			_fifoOverflowCounterNew						; //: 5;
	uint8_t			_fifoReadPointer							; //: 5;
	uint8_t			_fifoReadPointerOld							; //: 5;
	uint8_t			_fifoReadPointerNew							; //: 5;
	bool			_fifoRolloverOnFull							: 1;
	uint8_t			_fifoWritePointer							; //: 5;
	uint8_t			_fifoWritePointerOld						; //: 5;
	uint8_t			_fifoWritePointerNew						; //: 5;
	SampleAveraging	_sampleAveraging;
private:

	//     //////////////////     TEMPERATURE DATA     //////////////////     //
	bool			_dieTempEnable								: 1;
	uint8_t			_dieTempFraction							: 4;
	uint8_t			_dieTempInteger;
	bool			_dieTempReady								: 1;

	//     ////////////////    MULTILED SLOT CONTROL     ////////////////     //
	SlotControl		_multiLedSlot1Control;
	SlotControl		_multiLedSlot2Control;
	SlotControl		_multiLedSlot3Control;
	SlotControl		_multiLedSlot4Control;
	uint8_t			_slotsEnabledCounter						: 3;

	//     /////////////////    INTERRUPT CALLBACKS     /////////////////     //
public:
	void	(*_ambLightCancOverflowInterruptCallback)(void);
	void	(*_dieTempReadyInterruptCallback)(void);
	void	(*_fifoAlmostFullInterruptCallback)(void);
	void	(*_newFifoDataReadyInterruptCallback)(void);
	void	(*_powerReadyInterruptCallback)(void);



protected:
	// NONE

}; // class Max30102

// =============================================================================
// Max30102 - Class overloading operators
// =============================================================================

// NONE

// =============================================================================
// Global variables
// =============================================================================

// -----------------------------------------------------------------------------
// Externally defined global variables -----------------------------------------

// NONE

// -----------------------------------------------------------------------------
// Internally defined global variables -----------------------------------------

// NONE

// =============================================================================
// Max30102 - Class inline function definitions
// =============================================================================

// -------------------------------------------------------------------------
// Interrupt flags operator overloading
// -------------------------------------------------------------------------

inlined Max30102::InterruptFlags operator|(Max30102::InterruptFlags a, Max30102::InterruptFlags b)
{
	return static_cast<Max30102::InterruptFlags>(static_cast<int>(a) | static_cast<int>(b));
}

inlined Max30102::InterruptFlags &operator|=(Max30102::InterruptFlags &a, Max30102::InterruptFlags b)
{
	return a = static_cast<Max30102::InterruptFlags>(static_cast<int>(a) | static_cast<int>(b));
}

// -------------------------------------------------------------------------
// Fifo averaging operator overloading
// -------------------------------------------------------------------------

inlined uint8_t operator<<(Max30102::SampleAveraging a, uint8_t b)
{
	return static_cast<uint8_t>(static_cast<uint8_t>(a) << b);
}

// -------------------------------------------------------------------------
// Slot control operator overloading
// -------------------------------------------------------------------------

inlined uint8_t operator<<(Max30102::SlotControl a, uint8_t b)
{
	return static_cast<uint8_t>(static_cast<uint8_t>(a) << b);
}

// -------------------------------------------------------------------------
// Full scale operator overloading
// -------------------------------------------------------------------------

inlined uint8_t operator<<(Max30102::FullScale a, uint8_t b)
{
	return static_cast<uint8_t>(static_cast<uint8_t>(a) << b);
}

// -------------------------------------------------------------------------
// Mode control operator overloading
// -------------------------------------------------------------------------

inlined uint8_t operator<<(Max30102::ModeControl a, uint8_t b)
{
	return static_cast<uint8_t>(static_cast<uint8_t>(a) << b);
}

// -------------------------------------------------------------------------
// Resolution operator overloading
// -------------------------------------------------------------------------

inlined uint8_t operator<<(Max30102::Resolution a, uint8_t b)
{
	return static_cast<uint8_t>(static_cast<uint8_t>(a) << b);
}

// -------------------------------------------------------------------------
// Sample rate operator overloading
// -------------------------------------------------------------------------

inlined uint8_t operator<<(Max30102::SampleRate a, uint8_t b)
{
	return static_cast<uint8_t>(static_cast<uint8_t>(a) << b);
}

// -------------------------------------------------------------------------
// Led current operator overloading
// -------------------------------------------------------------------------

inlined uint8_t operator<<(Max30102::LedCurrent a, uint8_t b)
{
	return static_cast<uint8_t>(static_cast<uint8_t>(a) << b);
}

// =============================================================================
// General public functions declarations
// =============================================================================

// NONE

// =============================================================================
// General inline functions definitions
// =============================================================================

// NONE

// =============================================================================
// External default objects
// =============================================================================

// NONE

#endif // __MAX30102_HPP
