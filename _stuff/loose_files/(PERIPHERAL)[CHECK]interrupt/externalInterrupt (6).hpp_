/* =============================================================================
 * Project:		GPSDE++ AVR Library
 * File name:	externalInterrupt.hpp
 * Module:		External Interrupt Module Interface for GPDSE++ Library project
 * Authors:		Leandro Schwarz
 *				Hazael dos Santos Batista
 * Build:		1002
 * Date:		June 16, 2018
 * ========================================================================== */

#ifndef __EXTERNAL_INTERRUPT_HPP
#define __EXTERNAL_INTERRUPT_HPP 1002

// =============================================================================
// Dependencies
// =============================================================================

// Global definitions file
#include "globalDefines.hpp"
#if __GLOBAL_DEFINES_HPP != 1002
#	error	[externalInterrupt.hpp] Error 101 - Global definitions file (globalDefines.hpp) must be build 1002.
#endif

// Header files
/* NONE */

// =============================================================================
// Undefining previous definitions
// =============================================================================

/* NONE */

// =============================================================================
// Constants
// =============================================================================

/* NONE */

// =============================================================================
// Macro-functions
// =============================================================================

/* NONE */

// =============================================================================
// New data types
// =============================================================================

typedef enum portMode_e {
	PORT_NO_CHANGE		= 0,		// Keep last pin configurations
	PORT_OUTPUT_LOW		= 1,		// Pin configured as OUTPUT, LOW logic level
	PORT_OUTPUT_HIGH	= 2,		// Pin configured as OUTPUT, HIGH logic level
	PORT_INPUT_TRISTATE	= 3,		// Pin configured as INPUT, PULL-UPs off
	PORT_INPUT_PULL_UP	= 4			// Pin configured as INPUT, PULL-UPs on
} portMode_e;

typedef enum intSenseMode_e {
	INT_SENSE_NO_CHANGE			= 0,	//!< Keep last value configured
	INT_SENSE_LOW_LEVEL			= 1,	//!< Triggers interrupt constantly when in LOW logic level
	INT_SENSE_ANY_EDGE			= 2,	//!< Triggers interrupt at any logical change
	INT_SENSE_FALLING_EDGE		= 3,	//!< Triggers interrupt when a falling edge occurs
	INT_SENSE_RISING_EDGE		= 4		//!< Triggers interrupt when a rising edge occurs
} intSenseMode_e;

typedef enum pcint2Pins_f {
	PCINT23_PIN		= (1 << 7),
	PCINT22_PIN		= (1 << 6),
	PCINT21_PIN		= (1 << 5),
	PCINT20_PIN		= (1 << 4),
	PCINT19_PIN		= (1 << 3),
	PCINT18_PIN		= (1 << 2),
	PCINT17_PIN		= (1 << 1),
	PCINT16_PIN		= (1 << 0),
} pcint2Pins_f;

inline pcint2Pins_f operator |(pcint2Pins_f a, pcint2Pins_f b)
{
	return static_cast<pcint2Pins_f>(static_cast<int>(a) | static_cast<int>(b));
}

inline pcint2Pins_f operator &(pcint2Pins_f a, pcint2Pins_f b)
{
	return static_cast<pcint2Pins_f>(static_cast<int>(a) & static_cast<int>(b));
}

inline pcint2Pins_f operator ^(pcint2Pins_f a, pcint2Pins_f b)
{
	return static_cast<pcint2Pins_f>(static_cast<int>(a) ^ static_cast<int>(b));
}

typedef enum pcint1Pins_f {
	PCINT14_PIN		= (1 << 6),
	PCINT13_PIN		= (1 << 5),
	PCINT12_PIN		= (1 << 4),
	PCINT11_PIN		= (1 << 3),
	PCINT10_PIN		= (1 << 2),
	PCINT9_PIN		= (1 << 1),
	PCINT8_PIN		= (1 << 0),
} pcint1Pins_f;

typedef enum pcint0Pins_f {
	PCINT7_PIN		= (1 << 7),
	PCINT6_PIN		= (1 << 6),
	PCINT5_PIN		= (1 << 5),
	PCINT4_PIN		= (1 << 4),
	PCINT3_PIN		= (1 << 3),
	PCINT2_PIN		= (1 << 2),
	PCINT1_PIN		= (1 << 1),
	PCINT0_PIN		= (1 << 0),
} pcint0Pins_f;


// =============================================================================
// Template - Class declaration
// =============================================================================
/*
class Template {
	// New data types
public:

	// Constructors
public:

	// Methods
public:

private:

protected:

	// Data members
public:

private:

protected:

}; // class Template
*/
// =============================================================================
// Template - Class inline function definitions
// =============================================================================

/* NONE */

// =============================================================================
// Extern global variables
// =============================================================================

/* NONE */

// =============================================================================
// General public functions declarations
// =============================================================================

error_e		int1Config(portMode_e outputMode, intSenseMode_e sense);
error_e		int0Config(portMode_e outputMode, intSenseMode_e sense);
error_e		pcint2ActivatePins(pcint2Pins_f pinsList, portMode_e outputMode);
error_e		pcint1ActivatePins(pcint1Pins_f pinsList, portMode_e outputMode);
error_e		pcint0ActivatePins(pcint0Pins_f pinsList, portMode_e outputMode);
error_e		pcint2DeactivatePins(pcint2Pins_f pinsList);
error_e		pcint1DeactivatePins(pcint1Pins_f pinsList);
error_e		pcint0DeactivatePins(pcint0Pins_f pinsList);

void		int1ActivateInterrupt(void);
void		int0ActivateInterrupt(void);
void		int1DeactivateInterrupt(void);
void		int0DeactivateInterrupt(void);
void		int1ClearInterruptRequest(void);
void		int0ClearInterruptRequest(void);
void		pcint2Enable(void);
void		pcint1Enable(void);
void		pcint0Enable(void);
void		pcint2Disable(void);
void		pcint1Disable(void);
void		pcint0Disable(void);
void		pcint2ClearInterruptRequest(void);
void		pcint1ClearInterruptRequest(void);
void		pcint0ClearInterruptRequest(void);

// =============================================================================
// General inline functions definitions
// =============================================================================

void inline __attribute__((always_inline)) int1ActivateInterrupt(void)
{
	setBit(EIMSK, INT1);
	return;
}

void inline __attribute__((always_inline)) int0ActivateInterrupt(void)
{
	setBit(EIMSK, INT0);
	return;
}

void inline __attribute__((always_inline)) int1DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT1);
	return;
}

void inline __attribute__((always_inline)) int0DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT0);
	return;
}

void inline __attribute__((always_inline)) int1ClearInterruptRequest(void)
{
	setBit(EIFR, INTF1);
	return;
}

void inline __attribute__((always_inline)) int0ClearInterruptRequest(void)
{
	setBit(EIFR, INTF0);
	return;
}

// PCINTs

void inline __attribute__((always_inline)) pcint2Enable(void)
{
	setBit(PCICR, PCIE2);
	return;
}

void inline __attribute__((always_inline)) pcint1Enable(void)
{
	setBit(PCICR, PCIE1);
	return;
}

void inline __attribute__((always_inline)) pcint0Enable(void)
{
	setBit(PCICR, PCIE0);
	return;
}

void inline __attribute__((always_inline)) pcint2Disable(void)
{
	clrBit(PCICR, PCIE2);
	return;
}

void inline __attribute__((always_inline)) pcint1Disable(void)
{
	clrBit(PCICR, PCIE1);
	return;
}

void inline __attribute__((always_inline)) pcint0Disable(void)
{
	clrBit(PCICR, PCIE0);
	return;
}

void inline __attribute__((always_inline)) pcint2ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF2);
	return;
}

void inline __attribute__((always_inline)) pcint1ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF1);
	return;
}

void inline __attribute__((always_inline)) pcint0ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF0);
	return;
}

#endif // __EXTERNAL_INTERRUPT_HPP
