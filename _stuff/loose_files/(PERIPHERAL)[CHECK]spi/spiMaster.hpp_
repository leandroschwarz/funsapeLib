/* =============================================================================
 * Project:		GPSDE++ AVR Library
 * File name:	spiMaster.hpp
 * Module:		SPI Interface Module for GPDSE++ Library project
 * Authors:		Leandro Schwarz
 *				Hazael dos Santos Batista
 *				FÃ¡bio Cabral Pacheco
 * Build:		1002
 * Date:		June 14, 2018
 * ========================================================================== */

#ifndef __SPI_MASTER_HPP
#define __SPI_MASTER_HPP	1002

// =============================================================================
// Dependencies
// =============================================================================

// Global definitions file
#include "globalDefines.hpp"
#if __GLOBAL_DEFINES_HPP != 1002
#	error	[spiMaster.hpp] Error 101 - Global definitions file (globalDefines.hpp) must be build 1002.
#endif

// Header files
#include "system.hpp"

// =============================================================================
// Undefining previous definitions
// =============================================================================

/* NONE */

// =============================================================================
// Constants
// =============================================================================

#define SPI_READ	0x80
#define SPI_WRITE	0x00

// =============================================================================
// Macro-functions
// =============================================================================

/* NONE */

// =============================================================================
// New data types
// =============================================================================

/* NONE */

// =============================================================================
// SpiMaster - Class declaration
// =============================================================================

class SpiMaster {
	// New data types - Public
public:
	typedef enum spiClockPrescaler_e {
		SPI_PRESCALER_4 = 0,
		SPI_PRESCALER_16,
		SPI_PRESCALER_64,
		SPI_PRESCALER_128,
	} spiClockPrescaler_e;

	typedef enum spiMode_e {
		SPI_MODE_0 = 0,
		SPI_MODE_1,
		SPI_MODE_2,
		SPI_MODE_3
	} spiMode_e;

	// New data types - Private
private:
	// New data types - Protected
protected:

	// Constructors
public:
	SpiMaster();

	// Methods - Public
public:

	bool init(uint32_t maxSpeed = 1000000, uint8_t bufferSize = 20, bool useInterrupt = false, spiMode_e mode = SPI_MODE_0, bool lsbFirst = false);
	bool setDefaultDevice(void actFuncCall(void), void deactFuncCall(void));
	bool sendData(uint8_t *msg, uint8_t msgSize = 1);
	bool sendData(uint8_t reg, uint8_t *msg, uint8_t msgSize = 1);
//	bool setTimeOut(uint8_t timeOut);
	void interruptHandler(void);
	error_e getLastError(void);

	// Methods - Private
private:
	void holdGpio(void);
	void releaseGpio(void);
//	bool waitWhileIsBusy(void);
//	bool startTrasmission(void);
//	bool readFromBuffer(uint8_t *msg, uint8_t msgSize);

	// Methods - Protected
protected:

	// Data members - Public
public:

	// Data members - Private
private:
	void				(*activateDefaultDevice_)(void);
	void				(*deactivateDefaultDevice_)(void);
	bool				initialized_		: 1;
	bool				useInterrupt_		: 1;
	bool				callbacksReady_		: 1;
	spiClockPrescaler_e	clockPrescaler_		: 2;
	bool				doubleSpeed_		: 1;
	spiMode_e			mode_				: 2;
	bool				lsbFirst_			: 1;
	bool				masterEnable_		: 1;
	uint8_t				*bufferData_;
	uint8_t				bufferMaxSize_		: 7;
	uint8_t				bufferIndex_		: 7;
	uint8_t				bufferLength_		: 7;
	uint8_t				timeOut_;

//	bool		lastTransOK_		: 1;
//	uint8_t		 *bufferData_;
//	uint8_t		bufferMaxSize_		: 7;
//	uint8_t		bufferIndex_		: 7;
//	uint8_t		bufferLength_		: 7;
//	uint8_t		timeOut_;
	error_e		lastError_;

//	uint8_t		tempBytesToSend_	: 7;

// Data members - Protected
protected:

}; // class SpiMaster

// =============================================================================
// TwiMaster - Class inline function definitions
// =============================================================================

/* NONE */

// =============================================================================
// Extern global variables
// =============================================================================

extern SpiMaster spiMaster;

// =============================================================================
// General public functions declarations
// =============================================================================

/* NONE */

// =============================================================================
// General inline functions definitions
// =============================================================================

/* NONE */

#endif // __TWI_MASTER_HPP
