/* 
 * Project:			FunSAPE++ Embedded Library
 * File name:		funsapeLibSpi2.hpp
 * Module:			SPI Peripheral Module for FunSAPE++ Embedded Library project
 * Authors:			__AUTHORS_TO_REPLACE__
 * Build:			__BUILD_TO_REPLACE__
 * Last edition:	__DATE_TO_REPLACE__
 * ========================================================================== */

// 
// Include guard
// 

#ifndef __FUNSAPE_LIB_SPI2_HPP
#define __FUNSAPE_LIB_SPI2_HPP					__BUILD_TO_REPLACE__

// 
// Dependencies
// 

// -----------------------------------------------------------------------------
// Global definitions file -----------------------------------------------------

#include "../funsapeLibGlobalDefines.hpp"
#ifndef __FUNSAPE_LIB_GLOBAL_DEFINES_HPP
#	error	[funsapeLibSpi2.hpp] Error 9 - Global definitions file (funsapeLibGlobalDefines.hpp) is missing or corrupted!
#elif __FUNSAPE_LIB_GLOBAL_DEFINES_HPP != __BUILD_TO_REPLACE__
#	error	[funsapeLibSpi2.hpp] Error 10 - Build mismatch between (funsapeLibSpi2.hpp) and global definitions file (funsapeLibGlobalDefines.hpp)!
#endif

// -----------------------------------------------------------------------------
// Header files - FunSAPE Library header files ---------------------------------

#include "util/funsapeLibHandler.hpp"
#ifndef __FUNSAPE_LIB_HANDLER_HPP
#	error	[funsapeLibSpi2.hpp] Error 12 - Required module (funsapeLibHandler.hpp) is missing or corrupted!
#elif __FUNSAPE_LIB_HANDLER_HPP != __BUILD_TO_REPLACE__
#	error [funsapeLibSpi2.hpp] Error 103 - Required module (funsapeLibHandler.hpp) must be build __BUILD_TO_REPLACE__.
#endif
#include "util/funsapeLibDebug.hpp"
#ifndef __FUNSAPE_LIB_DEBUG_HPP
#	error	[funsapeLibSpi2.hpp] Error 12 - Required module (funsapeLibDebug.hpp) is missing or corrupted!
#elif __FUNSAPE_LIB_DEBUG_HPP != __BUILD_TO_REPLACE__
#	error [funsapeLibSpi2.hpp] Error 103 - Required module (funsapeLibDebug.hpp) must be build __BUILD_TO_REPLACE__.
#endif

// 
// Undefining previous definitions
// 

// NONE

// 
// Constant definitions
// 

// NONE

// 
// Macro-function definitions
// *INDENT-OFF*
// 

// NONE

// *INDENT-ON*

// 
// New data types
// 

// NONE

// 
// Extern global variables
// 

// NONE

// 
// Spi - Class declaration
// 

class Spi2 : Handler
{
	// -------------------------------------------------------------------------
	// New data types
	// -------------------------------------------------------------------------

public:
	enum SpiOperation {
		WRITE							= 0x00,
		READ							= 0x80
	};

private:
	// NONE

protected:
	// NONE

	// -------------------------------------------------------------------------
	// Operators overloading
	// -------------------------------------------------------------------------

public:
	// NONE

private:
	// NONE

protected:
	// NONE

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

public:
	Spi2(void);
	~Spi2(void);												// TODO: Implement function

	// -------------------------------------------------------------------------
	// Methods - Inherited methods
	// -------------------------------------------------------------------------

public:
	bool read(uint8_t, uint8_t *, uint16_t);
	bool write(uint8_t, uint8_t *, uint16_t);

	bool sendData(
			uint8_t *buffData_p,
			uint16_t buffSize_p = 1
	);
	bool sendData(
			uint8_t *txBuffData_p,
			uint8_t *rxBuffData_p,
			uint16_t buffSize_p = 1
	);
	bool sendData(
			uint8_t reg_p,
			uint8_t *buffData_p,
			uint16_t buffSize_p = 1
	);
	bool sendData(
			uint8_t reg_p,
			uint8_t *txBuffData_p,
			uint8_t *rxBuffData_p,
			uint16_t buffSize_p = 1
	);
	bool setDevice(
			void (* actFunc_p)(void),
			void (* deactFunc_p)(void)
	);
	Handler::HandlerType getHandlerType(void);

protected:
	// NONE

	// -------------------------------------------------------------------------
	// Methods - Class own methods
	// -------------------------------------------------------------------------

public:
#ifdef _FUNSAPE_PLATFORM_ARM_STM32
	bool init(
			SPI_HandleTypeDef *handler_p,
			uint16_t bufSize_p = 20
	);
	bool init(
			SPI_HandleTypeDef *handler_p,
			uint16_t rxBufSize_p,
			uint16_t txBufSize_p
	);
#endif
#ifdef _FUNSAPE_PLATFORM_AVR									// TODO: AVR implementation
	bool init(
			uint8_t *handler_p,
			uint16_t bufSize_p = 20
	);
	bool init(
			uint8_t *handler_p,
			uint16_t rxBufSize_p,
			uint16_t txBufSize_p
	);
#endif
	Error getLastError(void);
	bool setTimeout(
			uint16_t timeout_p
	);

	// Methods - Private
private:
	bool _initialize(void);
	bool _deinitialize(void);
	bool _transmit(void);

protected:
	// NONE

	// -------------------------------------------------------------------------
	// Properties
	// -------------------------------------------------------------------------

public:
	// NONE

private:
	//     /////////////////    PERIPHERAL HANDLER     //////////////////     //
#if defined(_FUNSAPE_PLATFORM_ARM_STM32)						// ARM implementation
	SPI_HandleTypeDef	*_spiHandler;
#elif defined(_FUNSAPE_PLATFORM_AVR)							// AVR implementation
	uint8_t				*_spiHandler;										// TODO: AVR implementation
#endif

	//     /////////////////    CONTROL AND STATUS     //////////////////     //
	bool				_initialized						: 1;
	bool				_devSelFunctiosSet					: 1;
	bool				_busy								: 1;
	void	(*_activateDefaultDevice)(void);
	void	(*_deactivateDefaultDevice)(void);
	uint16_t			_timeout;
	Error				_lastError;

	//     ////////////////////    DATA BUFFERS      ////////////////////     //
	uint8_t		*_rxBufferData;
	uint16_t	_rxBufferMaxSize;
	uint16_t	_rxBufferIndex;
	uint16_t	_rxBufferLength;
	uint8_t		*_txBufferData;
	uint16_t	_txBufferMaxSize;
	uint16_t	_txBufferIndex;
	uint16_t	_txBufferLength;

protected:
	// NONE

protected:
	// NONE

}; // class Spi

// 
// Spi - Class overloading operators
// 

// NONE

// 
// Global variables
// 

// -----------------------------------------------------------------------------
// Externally defined global variables -----------------------------------------

// NONE

// -----------------------------------------------------------------------------
// Internally defined global variables -----------------------------------------

// NONE

// 
// Spi - Class inline function definitions
// 

// NONE

// 
// General public functions declarations
// 

// NONE

// 
// General inline functions definitions
// 

// NONE

// 
// External default objects
// 

#endif // __FUNSAPE_LIB_SPI2_HPP
