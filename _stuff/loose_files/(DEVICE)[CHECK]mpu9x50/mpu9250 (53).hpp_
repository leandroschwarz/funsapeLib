
#ifndef __MPU9250_HPP
#define __MPU9250_HPP					__BUILD_TO_REPLACE__

#include "main.h"
#include "spi.h"

#define SPI_DEFAULT_TIMEOUT				10
#define SPI_OPERATION_READ				0x80
#define SPI_OPERATION_WRITE				0x00
#define MPU9250_WHO_AM_I				0x71

// Configuration Registers Addresses
#define REG_SMPLRT_DIV							0x19	// Sample Rate Divider Register
#define REG_CONFIG								0x1A	// Configuration Register
#	define BIT_CONFIG_FIFO_MODE					6
#	define BIT_CONFIG_EXT_SYNC_SET				3
#	define BIT_CONFIG_GYRO_DLPF_CFG				0
#define REG_GYRO_CONFIG							0x1B	// Gyroscope Configuration Register
#	define BIT_GYRO_CONFIG_X_ST_EN				7
#	define BIT_GYRO_CONFIG_Y_ST_EN				6
#	define BIT_GYRO_CONFIG_Z_ST_EN				5
#	define BIT_GYRO_CONFIG_FS_SEL				3
#	define BIT_GYRO_CONFIG_FCHOICE_B			0
#define REG_ACCEL_CONFIG						0x1C	// Accelerometer Configuration Registers
#	define BIT_ACCEL_CONFIG_X_ST_EN				7
#	define BIT_ACCEL_CONFIG_Y_ST_EN				6
#	define BIT_ACCEL_CONFIG_Z_ST_EN				5
#	define BIT_ACCEL_CONFIG_FS_SEL				3
#define REG_ACCEL_CONFIG2						0x1D	// ...
#	define BIT_ACCEL_CONFIG2_FCHOICE_B			3
#	define BIT_ACCEL_CONFIG2_DLPF_CFG			0
#define REG_ACCEL_LOW_POWER_ODR					0x1E	// ...
#	define BIT_ACCEL_LP_ODR_CLKSEL				0
#define REG_WOM_THR								0x1F	// Wake-on Motion Threshold Register
#define REG_SIGNAL_PATH_RESET					0x68	// Reset Register
#	define BIT_SIG_PAT_RST_GYRO					2
#	define BIT_SIG_PAT_RST_ACCEL				1
#	define BIT_SIG_PAT_RST_TEMP					0
#define REG_ACCEL_INTEL_CTRL					0x69	// Accelerometer Interrupt Control Register
#	define BIT_ACCEL_INTEL_CTRL_EN				7
#	define BIT_ACCEL_INTEL_CTRL_MODE			6
#define REG_USER_CTRL							0x6A	// User Control Register
#	define BIT_USR_CTRL_FIFO_EN					6
#	define BIT_USR_CTRL_I2C_MST_EN				5
#	define BIT_USR_CTRL_I2C_IF_DIS				4
#	define BIT_USR_CTRL_FIFO_RST				2
#	define BIT_USR_CTRL_I2C_MST_RST				1
#	define BIT_USR_CTRL_SIG_COND_RST			0
#define REG_PWR_MGMT_1							0x6B	// Power Management Registers
#	define BIT_PWR_MGMT_1_H_RESET				7
#	define BIT_PWR_MGMT_1_SLEEP					6
#	define BIT_PWR_MGMT_1_CYCLE					5
#	define BIT_PWR_MGMT_1_GYRO_STANDBY			4
#	define BIT_PWR_MGMT_1_PD_PTAT				3
#	define BIT_PWR_MGMT_1_CLKSEL0				0
#define REG_PWR_MGMT_2							0x6C	// ...
#	define BIT_PWR_MGMT_2_DIS_ACCEL_X			5
#	define BIT_PWR_MGMT_2_DIS_ACCEL_Y			4
#	define BIT_PWR_MGMT_2_DIS_ACCEL_Z			3
#	define BIT_PWR_MGMT_2_DIS_GYRO_X			2
#	define BIT_PWR_MGMT_2_DIS_GYRO_Y			1
#	define BIT_PWR_MGMT_2_DIS_GYRO_Z			0
#define REG_WHO_AM_I							0x75	// Who am I Register

// Accelerometer Registers Addresses
#define REG_ACCEL_X_SELF_TEST					0x0D	// Accelerometer Self-Test Registers
#define REG_ACCEL_Y_SELF_TEST					0x0E	// ...
#define REG_ACCEL_Z_SELF_TEST					0x0F	// ...
#define REG_ACCEL_XH_USR_OFFSET					0x77	// Accelerometer Offset Registers
#define REG_ACCEL_XL_USR_OFFSET					0x78	// ...
#define REG_ACCEL_YH_USR_OFFSET					0x7A	// ...
#define REG_ACCEL_YL_USR_OFFSET					0x7B	// ...
#define REG_ACCEL_ZH_USR_OFFSET					0x7D	// ...
#define REG_ACCEL_ZL_USR_OFFSET					0x7E	// ...
#define REG_ACCEL_OUT_XH						0x3B	// Accelerometer Measurements Registers
#define REG_ACCEL_OUT_XL						0x3C	// ...
#define REG_ACCEL_OUT_YH						0x3D	// ...
#define REG_ACCEL_OUT_YL						0x3E	// ...
#define REG_ACCEL_OUT_ZH						0x3F	// ...
#define REG_ACCEL_OUT_ZL						0x40	// ...

// Gyroscope Registers Addresses
#define REG_GYRO_X_SELF_TEST					0x00	// Gyroscope Self-Test Registers
#define REG_GYRO_Y_SELF_TEST					0x01	// ...
#define REG_GYRO_Z_SELF_TEST					0x02	// ...
#define REG_GYRO_XH_USR_OFFSET					0x13	// Gyro Offset Registers
#define REG_GYRO_XL_USR_OFFSET					0x14	// ...
#define REG_GYRO_YH_USR_OFFSET					0x15	// ...
#define REG_GYRO_YL_USR_OFFSET					0x16	// ...
#define REG_GYRO_ZH_USR_OFFSET					0x17	// ...
#define REG_GYRO_ZL_USR_OFFSET					0x18	// ...
#define REG_GYRO_OUT_XH							0x43	// Gyroscope Measurements Registers
#define REG_GYRO_OUT_XL							0x44	// ...
#define REG_GYRO_OUT_YH							0x45	// ...
#define REG_GYRO_OUT_YL							0x46	// ...
#define REG_GYRO_OUT_ZH							0x47	// ...
#define REG_GYRO_OUT_ZL							0x48	// ...

// Temperature Registers Addresses
#define REG_TEMP_OUT_H							0x41	// Temperature Measurements Registers
#define REG_TEMP_OUT_L							0x42	// ...

// FIFO Registers Addresses
#define REG_FIFO_EN								0x23	// FIFO Configuration Register
#	define BIT_FIFO_TEMP_EN						7
#	define BIT_FIFO_GYRO_X_EN					6
#	define BIT_FIFO_GYRO_Y_EN					5
#	define BIT_FIFO_GYRO_Z_EN					4
#	define BIT_FIFO_ACCEL_EN					3
#	define BIT_FIFO_SLV_2_EN					2
#	define BIT_FIFO_SLV_1_EN					1
#	define BIT_FIFO_SLV_0_EN					0
#define REG_FIFO_COUNT_H						0x72	// FIFO Configuration Registers
#define REG_FIFO_COUNT_L						0x73	// ...
#define REG_FIFO_R_W							0x74	// ...

// Interrupts Registers Addresses
#define REG_INT_CONFIG							0x37	// Interrupts Configuration Registers
#	define BIT_INT_CONFIG_INT_PIN_LEVEL			7
#	define BIT_INT_CONFIG_INT_PIN_DRIVER		6
#	define BIT_INT_CONFIG_INT_PIN_LATCH			5
#	define BIT_INT_CONFIG_INT_PIN_AUTO_RESET	4
#	define BIT_INT_CONFIG_FSYNC_PIN_LEVEL		3
#	define BIT_INT_CONFIG_FSYNC_PIN_MODE_EN		2
#	define BIT_INT_CONFIG_BYPASS_EN				1
#define REG_INT_ENABLE							0x38	// ...
#	define BIT_INT_ENABLE_WAKE_ON_MOTION_EN		6
#	define BIT_INT_ENABLE_FIFO_OVERFLOW_EN		4
#	define BIT_INT_ENABLE_FSYNC_INT_EN			3
#	define BIT_INT_ENABLE_RAW_DATA_READY_EN		0
#define REG_INT_STATUS							0x3A	// ...
#	define BIT_INT_STATUS_WAKE_ON_MOTION_INT	6
#	define BIT_INT_STATUS_FIFO_OVERFLOW_INT		4
#	define BIT_INT_STATUS_FSYNC_INT				3
#	define BIT_INT_STATUS_RAW_DATA_RDY_INT		0

// I2C Registers Addresses
#define REG_I2C_MST_CTRL						0x24	// I2C Master Configuration Registers
#	define BIT_I2C_MST_CTRL_MULT_MST_EN			7
#	define BIT_I2C_MST_CTRL_WAIT_FOR_ES			6
#	define BIT_I2C_MST_CTRL_SLV_3_FIFO_EN		5
#	define BIT_I2C_MST_CTRL_I2C_MST_P_NSR		4
#	define BIT_I2C_MST_CTRL_I2C_MST_CLK			0
#define REG_I2C_MST_DELAY_CTRL					0x67	// ...
#	define BIT_I2C_MST_DLY_CTRL_ES_SHADOW		7
#	define BIT_I2C_MST_DLY_CTRL_SLV4_DLY_EN		4
#	define BIT_I2C_MST_DLY_CTRL_SLV3_DLY_EN		3
#	define BIT_I2C_MST_DLY_CTRL_SLV2_DLY_EN		2
#	define BIT_I2C_MST_DLY_CTRL_SLV1_DLY_EN		1
#	define BIT_I2C_MST_DLY_CTRL_SLV0_DLY_EN		0
#define REG_I2C_MST_STATUS						0x36	// ...
#	define BIT_I2C_MST_STATUS_PASS_THROUGH		7
#	define BIT_I2C_MST_STATUS_SLV4_DONE			6
#	define BIT_I2C_MST_STATUS_LOST_ARB			5
#	define BIT_I2C_MST_STATUS_SLV4_NACK			4
#	define BIT_I2C_MST_STATUS_SLV3_NACK			3
#	define BIT_I2C_MST_STATUS_SLV2_NACK			2
#	define BIT_I2C_MST_STATUS_SLV1_NACK			1
#	define BIT_I2C_MST_STATUS_SLV0_NACK			0
#define REG_I2C_SLV0_ADDR						0x25	// I2C Slave 0 Configuration Registers
#	define BIT_I2C_SLV0_ADDR_RNW				7
#	define BIT_I2C_SLV0_ADDR_ID					0
#define REG_I2C_SLV0_REG						0x26	// ...
#define REG_I2C_SLV0_DO							0x63	// ...
#define REG_I2C_SLV0_CTRL						0x27	// ...
#	define BIT_I2C_SLV0_CTRL_EN					7
#	define BIT_I2C_SLV0_CTRL_BYTE_SW			6
#	define BIT_I2C_SLV0_CTRL_REG_DIS			5
#	define BIT_I2C_SLV0_CTRL_GRP				4
#	define BIT_I2C_SLV0_CTRL_LENG				0
#define REG_I2C_SLV1_ADDR						0x28	// I2C Slave 1 Configuration Registers
#	define BIT_I2C_SLV1_ADDR_RNW				7
#	define BIT_I2C_SLV1_ADDR_ID					0
#define REG_I2C_SLV1_REG						0x29	// ...
#define REG_I2C_SLV1_DO							0x64	// ...
#define REG_I2C_SLV1_CTRL						0x2A	// ...
#	define BIT_I2C_SLV1_CTRL_EN					7
#	define BIT_I2C_SLV1_CTRL_BYTE_SW			6
#	define BIT_I2C_SLV1_CTRL_REG_DIS			5
#	define BIT_I2C_SLV1_CTRL_GRP				4
#	define BIT_I2C_SLV1_CTRL_LENG				0
#define REG_I2C_SLV2_ADDR						0x2B	// I2C Slave 2 Configuration Registers
#	define BIT_I2C_SLV2_ADDR_RNW				7
#	define BIT_I2C_SLV2_ADDR_ID					0
#define REG_I2C_SLV2_REG						0x2C	// ...
#define REG_I2C_SLV2_DO							0x65	// ...
#define REG_I2C_SLV2_CTRL						0x2D	// ...
#	define BIT_I2C_SLV2_CTRL_EN					7
#	define BIT_I2C_SLV2_CTRL_BYTE_SW			6
#	define BIT_I2C_SLV2_CTRL_REG_DIS			5
#	define BIT_I2C_SLV2_CTRL_GRP				4
#	define BIT_I2C_SLV2_CTRL_LENG				0
#define REG_I2C_SLV3_ADDR						0x2E	// I2C Slave 3 Configuration Registers
#	define BIT_I2C_SLV3_ADDR_RNW				7
#	define BIT_I2C_SLV3_ADDR_ID					0
#define REG_I2C_SLV3_REG						0x2F	// ...
#define REG_I2C_SLV3_DO							0x66	// ...
#define REG_I2C_SLV3_CTRL						0x30	// ...
#	define BIT_I2C_SLV3_CTRL_EN					7
#	define BIT_I2C_SLV3_CTRL_BYTE_SW			6
#	define BIT_I2C_SLV3_CTRL_REG_DIS			5
#	define BIT_I2C_SLV3_CTRL_GRP				4
#	define BIT_I2C_SLV3_CTRL_LENG				0
#define REG_I2C_SLV4_ADDR						0x31	// I2C Slave 4 Configuration Registers
#	define BIT_I2C_SLV4_ADDR_RNW				7
#	define BIT_I2C_SLV4_ADDR_ID					0
#define REG_I2C_SLV4_REG						0x32	// ...
#define REG_I2C_SLV4_DO							0x33	// ...
#define REG_I2C_SLV4_CTRL						0x34	// ...
#	define BIT_I2C_SLV4_CTRL_EN					7
#	define BIT_I2C_SLV4_CTRL_DONE_INT_EN		6
#	define BIT_I2C_SLV4_CTRL_REG_DIS			5
#	define BIT_I2C_SLV4_CTRL_MST_DELAY			0
#define REG_I2C_SLV4_DI							0x35	// ...

// External Sensor Data Registers Addresses
#define REG_EXT_SENS_DATA_00					0x49	// External Sensor Data Registers
#define REG_EXT_SENS_DATA_01					0x4A	// ...
#define REG_EXT_SENS_DATA_02					0x4B	// ...
#define REG_EXT_SENS_DATA_03					0x4C	// ...
#define REG_EXT_SENS_DATA_04					0x4D	// ...
#define REG_EXT_SENS_DATA_05					0x4E	// ...
#define REG_EXT_SENS_DATA_06					0x4F	// ...
#define REG_EXT_SENS_DATA_07					0x50	// ...
#define REG_EXT_SENS_DATA_08					0x51	// ...
#define REG_EXT_SENS_DATA_09					0x52	// ...
#define REG_EXT_SENS_DATA_10					0x53	// ...
#define REG_EXT_SENS_DATA_11					0x54	// ...
#define REG_EXT_SENS_DATA_12					0x55	// ...
#define REG_EXT_SENS_DATA_13					0x56	// ...
#define REG_EXT_SENS_DATA_14					0x57	// ...
#define REG_EXT_SENS_DATA_15					0x58	// ...
#define REG_EXT_SENS_DATA_16					0x59	// ...
#define REG_EXT_SENS_DATA_17					0x5A	// ...
#define REG_EXT_SENS_DATA_18					0x5B	// ...
#define REG_EXT_SENS_DATA_19					0x5C	// ...
#define REG_EXT_SENS_DATA_20					0x5D	// ...
#define REG_EXT_SENS_DATA_21					0x5E	// ...
#define REG_EXT_SENS_DATA_22					0x5F	// ...
#define REG_EXT_SENS_DATA_23					0x60	// ...


typedef enum error_ex {
	ERROR_NONEX							= 0,
	ERROR_WRONG_CHIP					= 1,
	ERROR_SPI_COMMUNICATION_FAILED		= 2,
	ERROR_DEVICE_ID_MISMATCH			= 3,
} error_ex;

class Mpu9250
{
	// Constructor
public:
	Mpu9250(SPI_HandleTypeDef *spiHanler_p = nullptr);

	// Methods (Public)
public:
	bool init(SPI_HandleTypeDef *spiHanler_p = nullptr);
	bool getAccelData(uint16_t *accelData_p, bool updateRawData_p = true);
	bool getGyroData(uint16_t *gyroData_p, bool updateRawData_p = true);
	bool getTempData(uint16_t *tempData_p, bool updateRawData_p = true);
	error_ex getLastError(void);

	// Methods (Private)
private:
	bool _updateData(void);
	bool _identifyChip(void);

	// Properties
private:
	SPI_HandleTypeDef *_spiHandler;
	error_ex _lastError;
	uint16_t		_accelData[3];
	uint16_t		_tempData;
	uint16_t		_gyroData[3];
	float			_temperature;

};


bool sendData(SPI_HandleTypeDef *spiHandler_p, uint8_t *txBuffData_p, uint8_t *rxBuffData_p, uint16_t buffSize_p);




#endif
